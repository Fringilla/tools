@@JEDI_Include_Files
<TITLE JEDI Include Files>
\ \ 

@@jedi.inc
<GROUP JEDI Include Files>
Summary
The jedi.inc file is a source file that can be included by
units written in object pascal:

{$INCLUDE jedi.inc} or {$I jedi.inc}
Description
The jedi.inc source file defines compiler symbols for each
known compiler capabilities and each RTL features. These
symbols can be used for conditional compilation in your code.
After the jedi.inc is included at the top of one source file,
the symbols are available for the next lines of code in this
file. However, the symbols are not defined in all other
source file: the jedi.inc file has to be explicitly included
at the beginning of all required source files.



Six symbol kinds are defined in jedi.inc:
  * <link CompilerVersions, Compiler and IDE versions>
  * <link CompilerCapabilities, Compiler Capabilities>
  * <link CompilerSettings, Compiler Settings>
  * <link RTLFeatures>
  * <link HardwareArchitecture, Hardware architecture>
  * <link TargetOS, Target OS Platform>

@@CompilerVersions
<group jedi.inc>
<title Compiler and IDE Versions>
<keywords BCB, BCB1, BCB1_UP, BCB10, BCB10_UP, BCB11, BCB11_UP, BCB12, BCB12_UP, BCB14, BCB14_UP, BCB15, BCB15_UP, BCB16, BCB16_UP, BCB3, BCB3_UP, BCB4, BCB4_UP, BCB5, BCB5_UP, BCB6, BCB6_UP, BCBCOMPILER, BDS, BDS2, BDS2_UP, BDS3, BDS3_UP, BDS4, BDS4_UP, BDS5, BDS5_UP, BDS6, BDS6_UP, BDS7, BDS7_UP, BDS8, BDS8_UP, BDS9, BDS9_UP, BORLAND, COMPILER1, COMPILER1_UP, COMPILER10, COMPILER10_UP, COMPILER11, COMPILER11_UP, COMPILER12, COMPILER12_UP, COMPILER14, COMPILER14_UP, COMPILER15, COMPILER15_UP, COMPILER16, COMPILER16_UP, COMPILER2, COMPILER2_UP, COMPILER3, COMPILER3_UP, COMPILER35, COMPILER35_UP, COMPILER4, COMPILER4_UP, COMPILER5, COMPILER5_UP, COMPILER6, COMPILER6_UP, COMPILER7, COMPILER7_UP, COMPILER8, COMPILER8_UP, COMPILER9, COMPILER9_UP, CPPBUILDER, DELPHI, DELPHI1, DELPHI1_UP, DELPHI10, DELPHI10_UP, DELPHI11, DELPHI11_UP, DELPHI12, DELPHI12_UP, DELPHI14, DELPHI14_UP, DELPHI15, DELPHI15_UP, DELPHI16, DELPHI16_UP, DELPHI2, DELPHI2_UP, DELPHI2005, DELPHI2005_UP, DELPHI2006, DELPHI2006_UP, DELPHI2007, DELPHI2007_UP, DELPHI2009, DELPHI2009_UP, DELPHI2010, DELPHI2010_UP, DELPHI3, DELPHI3_UP, DELPHI4, DELPHI4_UP, DELPHI5, DELPHI5_UP, DELPHI6, DELPHI6_UP, DELPHI7, DELPHI7_UP, DELPHI8, DELPHI8_UP, DELPHI9, DELPHI9_UP, DELPHICOMPILER, DELPHICOMPILER1, DELPHICOMPILER1_UP, DELPHICOMPILER10, DELPHICOMPILER10_UP, DELPHICOMPILER11, DELPHICOMPILER11_UP, DELPHICOMPILER12, DELPHICOMPILER12_UP, DELPHICOMPILER14, DELPHICOMPILER14_UP, DELPHICOMPILER15, DELPHICOMPILER15_UP, DELPHICOMPILER16, DELPHICOMPILER16_UP, DELPHICOMPILER2, DELPHICOMPILER2_UP, DELPHICOMPILER3, DELPHICOMPILER3_UP, DELPHICOMPILER4, DELPHICOMPILER4_UP, DELPHICOMPILER5, DELPHICOMPILER5_UP, DELPHICOMPILER6, DELPHICOMPILER6_UP, DELPHICOMPILER7, DELPHICOMPILER7_UP, DELPHICOMPILER8, DELPHICOMPILER8_UP, DELPHICOMPILER9, DELPHICOMPILER9_UP, DELPHILANGUAGE, DELPHIXE, DELPHIXE_UP, FPC, KYLIX, KYLIX1, KYLIX1_UP, KYLIX2, KYLIX2_UP, KYLIX3, KYLIX3_UP>

Summary
Compiler symbols for detecting compiler and IDE version
Description
Once jedi.inc is included at the top of your pascal source
file, the following compiler symbols are defined depending on
your compiler and IDE version.

These symbols can be used for conditional compilation based
\on the IDE or on the compiler version the code is compiled
with.



The following symbols are defined subjected to the tool
family:
<table>
Symbol           \Description
---------------  -----------------------------------------------
DELPHI           Defined if compiled with Delphi
KYLIX            Defined if compiled with Kylix
DELPHICOMPILER   Defined if compiled with Delphi or
                  Kylix/Delphi
BCB              Defined if compiled with C++Builder
CPPBUILDER       Defined if compiled with C++Builder (alias for
                  BCB)
BCBCOMPILER      Defined if compiled with C++Builder or
                  Kylix/C++
DELPHILANGUAGE   Defined if compiled with Delphi, Kylix or
                  C++Builder
BORLAND          Defined if compiled with Delphi, Kylix or
                  C++Builder
FPC              Defined if compiled with FPC
</table>

If the compiler is DELPHI, then the following symbols are
defined depending on its version:
<table>
Symbol          \Description
--------------  ------------------------------------------------
DELPHI1         Defined when compiling with Delphi 1 (Codename
                 WASABI/MANGO)
DELPHI2         Defined when compiling with Delphi 2 (Codename
                 POLARIS)
DELPHI3         Defined when compiling with Delphi 3 (Codename
                 IVORY)
DELPHI4         Defined when compiling with Delphi 4 (Codename
                 ALLEGRO)
DELPHI5         Defined when compiling with Delphi 5 (Codename
                 ARGUS)
DELPHI6         Defined when compiling with Delphi 6 (Codename
                 ILLIAD)
DELPHI7         Defined when compiling with Delphi 7 (Codename
                 AURORA)
DELPHI8         Defined when compiling with Delphi 8 (Codename
                 OCTANE)
DELPHI2005      Defined when compiling with Delphi 2005
                 (Codename DIAMONDBACK)
DELPHI9         Alias for DELPHI2005
DELPHI10        Defined when compiling with Delphi 2006
                 (Codename DEXTER)
DELPHI2006      Alias for DELPHI10
DELPHI11        Defined when compiling with Delphi 2007 for
                 Win32 (Codename SPACELY)
DELPHI2007      Alias for DELPHI11
DELPHI12<p />   Defined when compiling with Delphi 2009 for
                 Win32 (Codename TIBURON)
DELPHI2009      Alias for DELPHI12
DELPHI14        Defined when compiling with Delphi 2010 for
                 Win32 (Codename WEAVER)
DELPHI2010      Alias for DELPHI14
DELPHI15        Defined when compiling with Delphi XE for Win32
                 (Codename FULCRUM)
DELPHIXE        Alias for DELPHI15
DELPHI16        Defined when compiling with Delphi XE2 for Win32
                 and Win64 (Codename PULSAR)
DELPHIXE2       Alias for DELPHI16
</table>

Same as below, except that these symbols are defined for some
\version and for all versions newer than this one:

<table>
Symbol          \Description
--------------  ------------------------------------------------
DELPHI1_UP      Defined when compiling with Delphi 1 or higher
DELPHI2_UP      Defined when compiling with Delphi 2 or higher
DELPHI3_UP      Defined when compiling with Delphi 3 or higher
DELPHI4_UP      Defined when compiling with Delphi 4 or higher
DELPHI5_UP      Defined when compiling with Delphi 5 or higher
DELPHI6_UP      Defined when compiling with Delphi 6 or higher
DELPHI7_UP      Defined when compiling with Delphi 7 or higher
DELPHI8_UP      Defined when compiling with Delphi 8 or higher
DELPHI2005_UP   Defined when compiling with Delphi 2005 or
                 higher
DELPHI9_UP      Alias for DELPHI2005_UP
DELPHI10_UP     Defined when compiling with Delphi 2006 or
                 higher
DELPHI2006_UP   Alias for DELPHI10_UP
DELPHI11_UP     Defined when compiling with Delphi 2007 for
                 Win32 or higher
DELPHI2007_UP   Alias for DELPHI11_UP
DELPHI12_UP     Defined when compiling with Delphi 2009 for
                 Win32 or higher
DELPHI2009_UP   Alias for DELPHI12_UP
DELPHI14_UP     Defined when compiling with Delphi 2010 for
                 Win32 or higher
DELPHI2010_UP   Alias for DELPHI14_UP
DELPHI15_UP     Defined when compiling with Delphi XE for Win32
                 \or higher
DELPHIXE_UP     Alias for DELPHI15_UP
DELPHI16_UP     Defined when compiling with Delphi XE2 for Win32
                 and Win64 or higher
DELPHIXE2_UP    Alias for DELPHI16_UP
</table>

If the compiler is KYLIX, then the following symbols are
defined depending on its version:

<table>
Symbol      \Description
----------  ----------------------------------------------
KYLIX1      Defined when compiling with Kylix 1
KYLIX2      Defined when compiling with Kylix 2
KYLIX3      Defined when compiling with Kylix 3 (Codename
             CORTEZ)
KYLIX1_UP   Defined when compiling with Kylix 1 or higher
KYLIX2_UP   Defined when compiling with Kylix 2 or higher
KYLIX3_UP   Defined when compiling with Kylix 3 or higher
</table>

If the compiler is DELPHI (DELPHI only, not coupled to any
C++Builder), then the following symbols are defined depending
\on its version:

<table>
Symbol                \Description
--------------------  ------------------------------------------
DELPHICOMPILER1       Defined when compiling with Delphi 1
DELPHICOMPILER2       Defined when compiling with Delphi 2
DELPHICOMPILER3       Defined when compiling with Delphi 3
DELPHICOMPILER4       Defined when compiling with Delphi 4
DELPHICOMPILER5       Defined when compiling with Delphi 5
DELPHICOMPILER6       Defined when compiling with Delphi 6 or
                       Kylix 1, 2 or 3
DELPHICOMPILER7       Defined when compiling with Delphi 7
DELPHICOMPILER8       Defined when compiling with Delphi 8
DELPHICOMPILER9       Defined when compiling with Delphi 2005
DELPHICOMPILER10      Defined when compiling with Delphi
                       Personality of BDS 4.0
DELPHICOMPILER11      Defined when compiling with Delphi 2007
                       for Win32
DELPHICOMPILER12      Defined when compiling with Delphi
                       Personality of BDS 6.0
DELPHICOMPILER14      Defined when compiling with Delphi
                       Personality of BDS 7.0
DELPHICOMPILER15      Defined when compiling with Delphi
                       Personality of BDS 8.0
DELPHICOMPILER16      Defined when compiling with Delphi
                       Personality of BDS 9.0
DELPHICOMPILER1_UP    Defined when compiling with Delphi 1 or
                       higher
DELPHICOMPILER2_UP    Defined when compiling with Delphi 2 or
                       higher
DELPHICOMPILER3_UP    Defined when compiling with Delphi 3 or
                       higher
DELPHICOMPILER4_UP    Defined when compiling with Delphi 4 or
                       higher
DELPHICOMPILER5_UP    Defined when compiling with Delphi 5 or
                       higher
DELPHICOMPILER6_UP    Defined when compiling with Delphi 6 or
                       Kylix 1, 2 or 3 or higher
DELPHICOMPILER7_UP    Defined when compiling with Delphi 7 or
                       higher
DELPHICOMPILER8_UP    Defined when compiling with Delphi 8 or
                       higher
DELPHICOMPILER9_UP    Defined when compiling with Delphi 2005
DELPHICOMPILER10_UP   Defined when compiling with Delphi 2006
                       \or higher
DELPHICOMPILER11_UP   Defined when compiling with Delphi 2007
                       for Win32 or higher
DELPHICOMPILER12_UP   Defined when compiling with Delphi 2009
                       for Win32 or higher
DELPHICOMPILER14_UP   Defined when compiling with Delphi 2010
                       for Win32 or higher
DELPHICOMPILER15_UP   Defined when compiling with Delphi XE for
                       Win32 or higher
DELPHICOMPILER16_UP   Defined when compiling with Delphi XE2 for
                       Win32 and Win64 or higher
</table>

If the compiler is BCB (or DELPHI coupled to C++Builder),
then the following symbols are defined depending on its
\version:

<table>
Symbol     \Description
---------  ------------------------------------------------------
BCB1       Defined when compiling with C++Builder 1
BCB3       Defined when compiling with C++Builder 3
BCB4       Defined when compiling with C++Builder 4
BCB5       Defined when compiling with C++Builder 5 (Codename
            RAMPAGE)
BCB6       Defined when compiling with C++Builder 6 (Codename
            RIPTIDE)
BCB10      Defined when compiling with C++Builder Personality of
            BDS 4.0 (also known as C++Builder 2006) (Codename
            DEXTER)
BCB11      Defined when compiling with C++Builder Personality of
            RAD Studio 2007 (also known as C++Builder 2007)
            (Codename COGSWELL)
BCB12      Defined when compiling with C++Builder Personality of
            RAD Studio 2009 (also known as C++Builder 2009)
            (Codename TIBURON)
BCB14      Defined when compiling with C++Builder Personality of
            RAD Studio 2010 (also known as C++Builder 2010)
            (Codename WEAVER)
BCB15      Defined when compiling with C++Builder Personality of
            RAD Studio XE (also known as C++Builder XE) (Codename
            FULCRUM)
BCB16      Defined when compiling with C++Builder Personality of
            RAD Studio XE2 (also known as C++Builder XE2) (Codename
            PULSAR)
BCB1_UP    Defined when compiling with C++Builder 1 or higher
BCB3_UP    Defined when compiling with C++Builder 3 or higher
BCB4_UP    Defined when compiling with C++Builder 4 or higher
BCB5_UP    Defined when compiling with C++Builder 5 or higher
BCB6_UP    Defined when compiling with C++Builder 6 or higher
BCB10_UP   Defined when compiling with C++Builder Personality of
            BDS 4.0 or higher
BCB11_UP   Defined when compiling with C++Builder Personality of
            RAD Studio 2007 or higher
BCB12_UP   Defined when compiling with C++Builder Personality of
            RAD Studio 2009 or higher
BCB14_UP   Defined when compiling with C++Builder Personality of
            RAD Studio 2010 or higher
BCB15_UP   Defined when compiling with C++Builder Personality of
            RAD Studio XE or higher
BCB16_UP   Defined when compiling with C++Builder Personality of
            RAD Studio XE2 or higher
</table>

If the compiler is BDS (DELPHI 8, C++Builder 2006 or newer),
then the following symbols are defined depending on its
\version:

<table>
Symbol    \Description
--------  ---------------------------------------------------------
BDS       Defined when compiling with BDS version of dcc32.exe
           (Codename SIDEWINDER)
BDS2      Defined when compiling with BDS 2.0 (Delphi 8) (Codename
           OCTANE)
BDS3      Defined when compiling with BDS 3.0 (Delphi 2005)
           (Codename DIAMONDBACK)
BDS4      Defined when compiling with BDS 4.0 (Borland Developer
           Studio 2006) (Codename DEXTER)
BDS5      Defined when compiling with BDS 5.0 (CodeGear RAD Studio
           2007) (Codename HIGHLANDER)
BDS6      Defined when compiling with BDS 6.0 (CodeGear RAD Studio
           2009) (Codename TIBURON)
BDS7      Defined when compiling with BDS 7.0 (Embarcadero RAD
           Studio 2010) (Codename WEAVER)
BDS8      Defined when compiling with BDS 8.0 (Embarcadero RAD
           Studio XE) (Codename FULCRUM)
BDS9      Defined when compiling with BDS 9.0 (Embarcadero RAD
           Studio XE2) (Codename PULSAR)
BDS2_UP   Defined when compiling with BDS 2.0 or higher
BDS3_UP   Defined when compiling with BDS 3.0 or higher
BDS4_UP   Defined when compiling with BDS 4.0 or higher
BDS5_UP   Defined when compiling with BDS 5.0 or higher
BDS6_UP   Defined when compiling with BDS 6.0 or higher
BDS7_UP   Defined when compiling with BDS 7.0 or higher
BDS8_UP   Defined when compiling with BDS 8.0 or higher
BDS9_UP   Defined when compiling with BDS 9.0 or higher
</table>

If the compiler is DELPHI or BCB, then the following symbols
are defined depending on its version:

<table>
Symbol          \Description
--------------  -------------------------------------------------
COMPILER1       Defined when compiling with Delphi 1
COMPILER2       Defined when compiling with Delphi 2 or
                 C++Builder 1
COMPILER3       Defined when compiling with Delphi 3
COMPILER35      Defined when compiling with C++Builder 3
COMPILER4       Defined when compiling with Delphi 4 or
                 C++Builder 4
COMPILER5       Defined when compiling with Delphi 5 or
                 C++Builder 5
COMPILER6       Defined when compiling with Delphi 6 or
                 C++Builder 6
COMPILER7       Defined when compiling with Delphi 7
COMPILER8       Defined when compiling with Delphi 8
COMPILER9       Defined when compiling with Delphi 9
COMPILER10      Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 4.0
COMPILER11      Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 5.0
COMPILER12      Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 6.0
COMPILER14      Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 7.0
COMPILER15      Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 8.0
COMPILER16      Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 9.0
COMPILER1_UP    Defined when compiling with Delphi 1 or higher
COMPILER2_UP    Defined when compiling with Delphi 2 or
                 C++Builder 1 or higher
COMPILER3_UP    Defined when compiling with Delphi 3 or higher
COMPILER35_UP   Defined when compiling with C++Builder 3 or
                 higher
COMPILER4_UP    Defined when compiling with Delphi 4 or
                 C++Builder 4 or higher
COMPILER5_UP    Defined when compiling with Delphi 5 or
                 C++Builder 5 or higher
COMPILER6_UP    Defined when compiling with Delphi 6 or
                 C++Builder 6 or higher
COMPILER7_UP    Defined when compiling with Delphi 7
COMPILER8_UP    Defined when compiling with Delphi 8
COMPILER9_UP    Defined when compiling with Delphi Personalities
                 \of BDS 3.0
COMPILER10_UP   Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 4.0 or higher
COMPILER11_UP   Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 5.0 or higher
COMPILER12_UP   Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 6.0 or higher
COMPILER14_UP   Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 7.0 or higher
COMPILER15_UP   Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 8.0 or higher
COMPILER16_UP   Defined when compiling with Delphi or C++Builder
                 Personalities of BDS 9.0 or higher
</table>
Pascal Syntax
{$IFDEF SYMBOL}
// this code will be compiled if the symbol is defined
{$ENDIF SYMBOL}

@@CompilerCapabilities
<group jedi.inc>
<title Compiler Capabilities>
<keywords ACCEPT_DEPRECATED, ACCEPT_LIBRARY, ACCEPT_PLATFORM, SUPPORTS_CAST_INTERFACE_TO_OBJ, SUPPORTS_CLASS_CTORDTORS, SUPPORTS_CLASS_FIELDS, SUPPORTS_CLASS_HELPERS, SUPPORTS_CLASS_OPERATORS, SUPPORTS_COMPILETIME_MESSAGES, SUPPORTS_CONSTPARAMS, SUPPORTS_CURRENCY, SUPPORTS_CUSTOMVARIANTS, SUPPORTS_DEFAULTPARAMS, SUPPORTS_DELAYED_LOADING, SUPPORTS_DEPRECATED, SUPPORTS_DEPRECATED_DETAILS, SUPPORTS_DEPRECATED_WARNINGS, SUPPORTS_DISPID, SUPPORTS_DISPINTERFACE, SUPPORTS_DOUBLE, SUPPORTS_DYNAMICARRAYS, SUPPORTS_ENHANCED_RECORDS, SUPPORTS_ENUMVALUE, SUPPORTS_EXPERIMENTAL_WARNINGS, SUPPORTS_EXTENDED, SUPPORTS_EXTSYM, SUPPORTS_FINAL, SUPPORTS_FOR_IN, SUPPORTS_GENERICS, SUPPORTS_IMPLEMENTS, SUPPORTS_INLINE, SUPPORTS_INT_ALIASES, SUPPORTS_INT64, SUPPORTS_UINT64, SUPPORTS_INTERFACE, SUPPORTS_LIBRARY, SUPPORTS_LIBRARY_WARNINGS, SUPPORTS_LOCAL, SUPPORTS_LONGWORD, SUPPORTS_METHODINFO, SUPPORTS_NESTED_CONSTANTS, SUPPORTS_NESTED_TYPES, SUPPORTS_NODEFINE, SUPPORTS_OUTPARAMS, SUPPORTS_OVERLOAD, SUPPORTS_PACKAGES, SUPPORTS_PLATFORM, SUPPORTS_PLATFORM_WARNINGS, SUPPORTS_REGION, SUPPORTS_SETPEFLAGS, SUPPORTS_SINGLE, SUPPORTS_STATIC, SUPPORTS_STRICT, SUPPORTS_THREADVAR, SUPPORTS_UNICODE, SUPPORTS_UNICODE_STRING, SUPPORTS_UNSAFE_WARNINGS, SUPPORTS_VARARGS, SUPPORTS_VARIANT, SUPPORTS_WEAKPACKAGEUNIT, SUPPORTS_WIDECHAR, SUPPORTS_WIDESTRING>

Summary
Compiler symbol for detecting compiler capabilities.
Description
Once jedi.inc is included at the top of your pascal source
file, the following compiler symbols are defined depending on
your compiler and IDE version.

These symbols can be used for conditional compilation based
\on compiler available features:

<table>
Symbol                           \Description
-------------------------------  -------------------------------
SUPPORTS_CONSTPARAMS             Compiler supports const
                                  \parameters (D1+)
SUPPORTS_SINGLE                  Compiler supports the Single
                                  type (D1+)
SUPPORTS_DOUBLE                  Compiler supports the Double
                                  type (D1+)
SUPPORTS_EXTENDED                Compiler supports the Extended
                                  type (D1+)
SUPPORTS_CURRENCY                Compiler supports the Currency
                                  type (D2+)
SUPPORTS_THREADVAR               Compiler supports threadvar
                                  declarations (D2+)
SUPPORTS_OUTPARAMS               Compiler supports out
                                  \parameters (D3+)
SUPPORTS_VARIANT                 Compiler supports variant
                                  (D2+)
SUPPORTS_WIDECHAR                Compiler supports the WideChar
                                  type (D2+)
SUPPORTS_WIDESTRING              Compiler supports the
                                  WideString type (D3+/BCB3+)
SUPPORTS_INTERFACE               Compiler supports interfaces
                                  (D3+/BCB3+)
SUPPORTS_DISPINTERFACE           Compiler supports dispatch
                                  interfaces (D3+/BCB3+)
SUPPORTS_DISPID                  Compiler supports dispatch ids
                                  (D3+/BCB3+/FPC)
SUPPORTS_EXTSYM                  Compiler supports the
                                  $EXTERNALSYM directive
                                  (D4+/BCB3+)
SUPPORTS_NODEFINE                Compiler supports the
                                  $NODEFINE directive
                                  (D4+/BCB3+)
SUPPORTS_LONGWORD                Compiler supports the LongWord
                                  type (unsigned 32 bit)
                                  (D4+/BCB4+)
SUPPORTS_INT64                   Compiler supports the Int64
                                  type (D4+/BCB4+)
SUPPORTS_UINT64                  Compiler supports the UInt64
                                  type (D15+/BCB15+)
SUPPORTS_DYNAMICARRAYS           Compiler supports dynamic
                                  arrays (D4+/BCB4+)
SUPPORTS_DEFAULTPARAMS           Compiler supports default
                                  \parameters (D4+/BCB4+)
SUPPORTS_OVERLOAD                Compiler supports overloading
                                  (D4+/BCB4+)
SUPPORTS_IMPLEMENTS              Compiler supports implements
                                  (D4+/BCB4+)
SUPPORTS_DEPRECATED              Compiler supports the
                                  deprecated directive
                                  (D6+/BCB6+)
SUPPORTS_PLATFORM                Compiler supports the platform
                                  directive (D6+/BCB6+)
SUPPORTS_LIBRARY                 Compiler supports the library
                                  directive (D6+/BCB6+/FPC)
SUPPORTS_LOCAL                   Compiler supports the local
                                  directive (D6+/BCB6+)
SUPPORTS_SETPEFLAGS              Compiler supports the
                                  SetPEFlags directive
                                  (D6+/BCB6+)
SUPPORTS_EXPERIMENTAL_WARNINGS   Compiler supports the WARN
                                  SYMBOL_EXPERIMENTAL and WARN
                                  UNIT_EXPERIMENTAL directives
                                  (D6+/BCB6+)
SUPPORTS_INLINE                  Compiler supports the inline
                                  directive (D9+/FPC)
SUPPORTS_FOR_IN                  Compiler supports for in loops
                                  (D9+)
SUPPORTS_NESTED_CONSTANTS        Compiler supports nested
                                  constants (D9+)
SUPPORTS_NESTED_TYPES            Compiler supports nested types
                                  (D9+)
SUPPORTS_REGION                  Compiler supports the REGION
                                  and ENDREGION directives (D9+)
SUPPORTS_ENHANCED_RECORDS        Compiler supports class
                                  [operator|function|procedure]
                                  for record types (D9.NET,
                                  D10+)
SUPPORTS_CLASS_FIELDS            Compiler supports class fields
                                  (D9.NET, D10+)
SUPPORTS_CLASS_HELPERS           Compiler supports class
                                  helpers (D9.NET, D10+)
SUPPORTS_CLASS_OPERATORS         Compiler supports class
                                  \operators (D9.NET, D10+)
SUPPORTS_CLASS_CTORDTORS         Compiler supports class
                                  contructors/destructors (D14+)
SUPPORTS_STRICT                  Compiler supports strict
                                  keyword (D9.NET, D10+)
SUPPORTS_STATIC                  Compiler supports static
                                  keyword (D9.NET, D10+)
SUPPORTS_FINAL                   Compiler supports final
                                  keyword (D9.NET, D10+)
SUPPORTS_METHODINFO              Compiler supports the
                                  METHODINFO directives (D10+)
SUPPORTS_GENERICS                Compiler supports generic
                                  implementations (D11.NET,
                                  D12+)
SUPPORTS_DEPRECATED_DETAILS      Compiler supports additional
                                  text for the deprecated
                                  directive (D11.NET, D12+)
ACCEPT_DEPRECATED                Compiler supports or ignores
                                  the deprecated directive
                                  (D6+/BCB6+/FPC)
ACCEPT_PLATFORM                  Compiler supports or ignores
                                  the platform directive
                                  (D6+/BCB6+/FPC)
ACCEPT_LIBRARY                   Compiler supports or ignores
                                  the library directive
                                  (D6+/BCB6+)
SUPPORTS_CUSTOMVARIANTS          Compiler supports custom
                                  variants (D6+/BCB6+)
SUPPORTS_VARARGS                 Compiler supports varargs
                                  (D6+/BCB6+)
SUPPORTS_ENUMVALUE               Compiler supports assigning
                                  \ordinalities to values of
                                  enums (D6+/BCB6+)
SUPPORTS_DEPRECATED_WARNINGS     Compiler supports deprecated
                                  warnings (D6+/BCB6+)
SUPPORTS_LIBRARY_WARNINGS        Compiler supports library
                                  warnings (D6+/BCB6+)
SUPPORTS_PLATFORM_WARNINGS       Compiler supports platform
                                  warnings (D6+/BCB6+)
SUPPORTS_UNSAFE_WARNINGS         Compiler supports unsafe
                                  warnings (D7)
SUPPORTS_WEAKPACKAGEUNIT         Compiler supports the
                                  WEAKPACKAGEUNIT directive
SUPPORTS_COMPILETIME_MESSAGES    Compiler supports the MESSAGE
                                  directive
SUPPORTS_PACKAGES                Compiler supports Packages
SUPPORTS_UNICODE                 string type is aliased to an
                                  unicode string (WideString or
                                  UnicodeString) (DX.NET, D12+)
SUPPORTS_UNICODE_STRING          Compiler supports
                                  UnicodeString (D12+)
SUPPORTS_INT_ALIASES             Types Int8, Int16, Int32,
                                  UInt8, UInt16 and UInt32 are
                                  defined in the unit System
                                  (D12+)
SUPPORTS_CAST_INTERFACE_TO_OBJ   The compiler supports casts
                                  from interfaces to objects
                                  (D14+)
SUPPORTS_DELAYED_LOADING         The compiler generates stubs
                                  for delaying imported function
                                  loads (D14+)
</table>
Pascal Syntax
{$IFDEF SYMBOL}
// The compiler feature is available
{$ENDIF SYMBOL}

@@CompilerSettings
<group jedi.inc>
<title Compiler Settings>
<keywords ALIGN_ON, ASSERTIONS_ON, BOOLEVAL_ON, DEBUGINFO_ON, EXTENDEDSYNTAX_ON, IMPORTEDDATA_ON, IOCHECKS_ON, LOCALSYMBOLS, LOCALSYMBOLS_ON, LONGSTRINGS_ON, OPENSTRINGS_ON, OPTIMIZATION_ON, OVERFLOWCHECKS_ON, RANGECHECKS_ON, SAFEDIVIDE_ON, STACKFRAMES_ON, TYPEDADDRESS_ON, TYPEINFO_ON, VARSTRINGCHECKS_ON, WRITEABLECONST_ON>

Summary
Compiler symbol for detecting compiler settings
Description
Once jedi.inc is included at the top of your pascal source
file, the following compiler symbols are defined depending on
your compiler settings.

These symbols can be used for testing or restoring the
initial compiler settings.

<table>
Symbol               \Description
-------------------  -------------------------------------------
ALIGN_ON             Compiling in the A+ state (no alignment)
BOOLEVAL_ON          Compiling in the B+ state (complete
                      boolean evaluation)
ASSERTIONS_ON        Compiling in the C+ state (assertions on)
DEBUGINFO_ON         Compiling in the D+ state (debug info
                      generation on)
IMPORTEDDATA_ON      Compiling in the G+ state (creation of
                      imported data references)
LONGSTRINGS_ON       Compiling in the H+ state (string defined
                      as AnsiString)
IOCHECKS_ON          Compiling in the I+ state (I/O checking
                      enabled)
WRITEABLECONST_ON    Compiling in the J+ state (typed constants
                      can be modified)
LOCALSYMBOLS         Compiling in the L+ state (local symbol
                      generation)
LOCALSYMBOLS_ON      Alias of LOCALSYMBOLS
TYPEINFO_ON          Compiling in the M+ state (RTTI generation
                      \on)
OPTIMIZATION_ON      Compiling in the O+ state (code
                      \optimization on)
OPENSTRINGS_ON       Compiling in the P+ state (variable string
                      \parameters are openstrings)
OVERFLOWCHECKS_ON    Compiling in the Q+ state (overflow
                      checing on)
RANGECHECKS_ON       Compiling in the R+ state (range checking
                      \on)
TYPEDADDRESS_ON      Compiling in the T+ state (pointers
                      \obtained using the @ operator are typed)
SAFEDIVIDE_ON        Compiling in the U+ state (save FDIV
                      instruction through RTL emulation)
VARSTRINGCHECKS_ON   Compiling in the V+ state (type checking
                      \of shortstrings)
STACKFRAMES_ON       Compiling in the W+ state (generation of
                      stack frames)
EXTENDEDSYNTAX_ON    Compiling in the X+ state (Delphi extended
                      syntax enabled)
</table>

Pascal Syntax
{$IFDEF SYMBOL}
// The piece of code will be compiled only if this compiler setting is enabled
{$ENDIF SYMBOL}

// These symbols can also be used for restoring the initial compiler settings after explicit changes in the code:
{$Q-}
// this code will be compiled with disabled numeric overflows
{$IFDEF OVERFLOWCHECKS_ON}
{$Q+}
{$ENDIF OVERFLOWCHECKS_ON}
// the following code will be compiled with previous compiler settings

@@RTLFeatures
<group jedi.inc>
<title RTL Features>
<keywords CLR10, CLR10_UP, CLR11, CLR11_UP, CLR20, CLR20_UP, HAS_UNIT_ANSISTRINGS, HAS_UNIT_CONTNRS, HAS_UNIT_DATEUTILS, HAS_UNIT_GIFIMG, HAS_UNIT_HTTPPROD, HAS_UNIT_LIBC, HAS_UNIT_PNGIMAGE, HAS_UNIT_REGULAREXPRESSIONSAPI, HAS_UNIT_RTLCONSTS, HAS_UNIT_RTTI, HAS_UNIT_STRUTILS, HAS_UNIT_SYSTEM_UITYPES, HAS_UNIT_TYPES, HAS_UNIT_VARIANTS, RTL100_UP, RTL110_UP, RTL120_UP, RTL125_UP, RTL130_UP, RTL140_UP, RTL150_UP, RTL160_UP, RTL170_UP, RTL180_UP, RTL185_UP, RTL190_UP, RTL200_UP, RTL210_UP, RTL220_UP, RTL230_UP, RTL80_UP, RTL90_UP, RTL93_UP, VCL, VisualCLX, XPLATFORM_RTL>

Summary
Compiler symbols for detecting RTL features.
Description
Once jedi.inc is included at the top of your pascal source
file, the following compiler symbols are defined depending on
the RTL features.

These symbols can be used for code conditional compilation
based on available RTL feature.



These symbols are defined depending on the RTL family:

<table>
Symbol          \Description
--------------  ----------------------------------------------------
VCL             Defined for Delphi/BCB (Win32) exactly if VisualCLX
                 is not defined
VisualCLX       Defined for Kylix; needs to be defined for
                 Delphi/BCB to use JCL with VisualCLX applications.
XPLATFORM_RTL   The RTL supports crossplatform function names (e.g.
                 RaiseLastOSError) (D6+/BCB6+/FPC)
</table>

These symbols identify the RTL version:

<table>
Symbol      \Description
----------  ------------------------------------------------------
RTL80_UP    Defined when compiling with Delphi 1 or higher
RTL90_UP    Defined when compiling with Delphi 2 or higher
RTL93_UP    Defined when compiling with C++Builder 1 or higher
RTL100_UP   Defined when compiling with Delphi 3 or higher
RTL110_UP   Defined when compiling with C++Builder 3 or higher
RTL120_UP   Defined when compiling with Delphi 4 or higher
RTL125_UP   Defined when compiling with C++Builder 4 or higher
RTL130_UP   Defined when compiling with Delphi 5 or C++Builder 5
             \or higher
RTL140_UP   Defined when compiling with Delphi 6, Kylix 1, 2 or 3
             \or C++Builder 6 or higher
RTL150_UP   Defined when compiling with Delphi 7 or higher
RTL160_UP   Defined when compiling with Delphi 8 or higher
RTL170_UP   Defined when compiling with Delphi Personalities of
             BDS 3.0 or higher
RTL180_UP   Defined when compiling with Delphi or C++Builder
             Personalities of BDS 4.0 or higher
RTL185_UP   Defined when compiling with Delphi or C++Builder
             Personalities of BDS 5.0 or higher
RTL190_UP   Defined when compiling with Delphi.NET of BDS 5.0 or
             higher
RTL200_UP   Defined when compiling with Delphi or C++Builder
             Personalities of BDS 6.0 or higher
RTL210_UP   Defined when compiling with Delphi or C++Builder
             Personalities of BDS 7.0 or higher
RTL220_UP   Defined when compiling with Delphi or C++Builder
             Personalities of BDS 8.0 or higher
RTL230_UP   Defined when compiling with Delphi or C++Builder
             Personalities of BDS 9.0 or higher
</table>

If the RTL is CLR, then the following symbols are defined
depending on its version:
<table>
Symbol     \Description
---------  ------------------------------------------------------
CLR        Defined when compiling for .NET
CLR10      Defined when compiling for .NET 1.0 (may be overriden
            by FORCE_CLR10)
CLR10_UP   Defined when compiling for .NET 1.0 or higher
CLR11      Defined when compiling for .NET 1.1 (may be overriden
            by FORCE_CLR11)
CLR11_UP   Defined when compiling for .NET 1.1 or higher
CLR20      Defined when compiling for .NET 2.0 (may be overriden
            by FORCE_CLR20)
CLR20_UP   Defined when compiling for .NET 2.0 or higher
</table>

<table>
Symbol                          \Description
------------------------------  ---------------------------------------
HAS_UNIT_LIBC                   \Unit Libc exists (Kylix, FPC on
                                 Linux/x86)
HAS_UNIT_RTLCONSTS              \Unit RTLConsts exists (D6+/BCB6+/FPC)
HAS_UNIT_TYPES                  \Unit Types exists (D6+/BCB6+/FPC)
HAS_UNIT_VARIANTS               \Unit Variants exists (D6+/BCB6+/FPC)
HAS_UNIT_STRUTILS               \Unit StrUtils exists (D6+/BCB6+/FPC)
HAS_UNIT_DATEUTILS              \Unit DateUtils exists (D6+/BCB6+/FPC)
HAS_UNIT_CONTNRS                \Unit contnrs exists (D6+/BCB6+/FPC)
HAS_UNIT_HTTPPROD               \Unit HTTPProd exists (D9+)
HAS_UNIT_GIFIMG                 \Unit GifImg exists (D11+)
HAS_UNIT_ANSISTRINGS            \Unit AnsiStrings exists (D12+)
HAS_UNIT_PNGIMAGE               \Unit PngImage exists (D12+)
HAS_UNIT_CHARACTER              \Unit Character exists (D12+)
HAS_UNIT_RTTI                   \Unit RTTI is available (D14+)
HAS_UNIT_REGULAREXPRESSIONSAPI  \Unit RegularExpressionsAPI is available (D15+)
HAS_UNIT_SYSTEM_UITYPES         \Unit System.UiTypes is available (D16+) 
</table>
Pascal Syntax
{$IFDEF SYMBOL}
// The RTL feature is available
{$ENDIF SYMBOL}

@@HardwareArchitecture
<group jedi.inc>
<title Hardware architecture>
<keywords CPU32, CPU386, CPU64, CPUASM, CPUx86_64>

Summary
Compiler symbols for detecting hardware architecture.
Description
Once jedi.inc is included at the top of your pascal source
file, the following compiler symbols are defined depending on
the target hardware.

These symbols can be used for code conditional compilation
based on hardware architecture.

<table>
Symbol      \Description
----------  ---------------------------------------------------
CPU386      Defined when target platform is native x86 (win32)
CPUx86_64   Defined when target platform is native x86_64
             (win64)
CPU32       Defined when target is 32-bit
CPU64       Defined when target is 64-bit
CPUASM      Defined when target assembler is available
</table>

Pascal Syntax
{$IFDEF SYMBOL}
// This code will be compiled only if this platform is targeted
{$ENDIF SYMBOL}

@@TargetOS
<group jedi.inc>
<title Target OS Platform>
<keywords CLR, LINUX, MSWINDOWS, PUREPASCAL, UNIX, WIN32, Win32API, WIN64>

Summary
Compiler symbols for detecting target OS platform.
Description
Once jedi.inc is included at the top of your pascal source
file, the following compiler symbols are defined depending on
the target OS platform.

These symbols can be used for code conditional compilation
based on target OS platform:

<table>
Symbol       \Description
-----------  -----------------------------------------------------
WIN32        Defined when target platform is 32 bit Windows
WIN64        Defined when target platform is 64 bit Windows
MSWINDOWS    Defined when target platform is 32 bit Windows
LINUX        Defined when target platform is Linux
UNIX         Defined when target platform is Unix-like (including
              Linux)
CLR          Defined when target platform is .NET
PUREPASCAL   Code is machine-independent (as opposed to assembler
              code)
Win32API     Code is specific for the Win32 API; use instead of
              "{$IFNDEF CLR} {$IFDEF MSWINDOWS}" constructs
</table>

Pascal Syntax
{$IFDEF SYMBOL}
// this code will be compiled only for this platform
{$ENDIF SYMBOL}

@@!!FILES
Summary
This is the list of Project JEDI files.

@@!!SYMREF
Summary
This is the list of Project JEDI packages.
